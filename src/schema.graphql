type Name {
    firstName: String!
    lastName: String!
    fullName: String!
}

type Student {
    id: ID!
    name: Name!
    courses: [Course!]!
    friends: [Student!]!
}

type Course {
    id: ID!
    name: String!
    students: [Student!]!
}

# root query, case sensitivy
type Query {
    ################## Student ############################
    """
    Search for mutiple students
    (This comment will exist in Graphql Playground DOCS)
    """
    searchStudents(keyword: String): [Student!]!

    """
    get student by ID
    """
    student(id: ID!): Student

    ################## Course ############################

    """
    Search for mutiple courses
    (This comment will exist in Graphql Playground DOCS)
    """
    searchCourses(keyword: String): [Course!]!

    """
    get course by ID
    """
    course(id: ID!): Course
}

type StudentResult {
    success: Boolean!
    failureReason: String
    student: Student
}

input AddStudentInput {
    """
    optional, autogenreate if null
    """
    id: ID
    firstName: String!
    lastName: String!
}

input EditStudentInput {
    firstName: String
    lastName: String
}

type StudentEnrollmentResult {
    success: Boolean!
    failureReason: String
    student: Student
}

type StudentFriendshipResult {
    success: Boolean!
    failureReason: String
    students: [Student!]
}

type Mutation {
    addStudent(student: AddStudentInput!): StudentResult!
    editStudent(id: ID!, updates: EditStudentInput!): StudentResult!

    enrollCourse(studentId: ID!, courseId: ID!): StudentEnrollmentResult!
    dropCourse(studentId: ID!, courseId: ID!): StudentEnrollmentResult!

    addFriend(student1: ID!, student2: ID!): StudentFriendshipResult!
    unFriend(student1: ID!, student2: ID!): StudentFriendshipResult!
}
